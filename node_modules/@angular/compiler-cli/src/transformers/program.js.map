{"version":3,"file":"program.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/program.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotCompiler, AotCompilerHost, AotCompilerOptions, GeneratedFile, NgAnalyzedModules, core, createAotCompiler, getParseErrors, isSyntaxError, toTypeScript} from '@angular/compiler';\nimport {createBundleIndexHost} from '@angular/tsc-wrapped';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {BaseAotCompilerHost} from '../compiler_host';\nimport {TypeChecker} from '../diagnostics/check_types';\n\nimport {CompilerHost, CompilerOptions, CustomTransformers, DEFAULT_ERROR_CODE, Diagnostic, EmitFlags, Program, SOURCE, TsEmitArguments, TsEmitCallback} from './api';\nimport {LowerMetadataCache, getExpressionLoweringTransformFactory} from './lower_expressions';\nimport {getAngularEmitterTransformFactory} from './node_emitter_transform';\n\nconst GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\n\nconst emptyModules: NgAnalyzedModules = {\n  ngModules: [],\n  ngModuleByPipeOrDirective: new Map(),\n  files: []\n};\n\nconst defaultEmitCallback: TsEmitCallback =\n    ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) =>\n        program.emit(\n            targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n\n\nclass AngularCompilerProgram implements Program {\n  private tsProgram: ts.Program;\n  private aotCompilerHost: AotCompilerHost;\n  private compiler: AotCompiler;\n  private srcNames: string[];\n  private metadataCache: LowerMetadataCache;\n  // Lazily initialized fields\n  private _analyzedModules: NgAnalyzedModules|undefined;\n  private _structuralDiagnostics: Diagnostic[] = [];\n  private _stubs: GeneratedFile[]|undefined;\n  private _stubFiles: string[]|undefined;\n  private _programWithStubsHost: ts.CompilerHost|undefined;\n  private _programWithStubs: ts.Program|undefined;\n  private _generatedFiles: GeneratedFile[]|undefined;\n  private _generatedFileDiagnostics: Diagnostic[]|undefined;\n  private _typeChecker: TypeChecker|undefined;\n  private _semanticDiagnostics: Diagnostic[]|undefined;\n  private _optionsDiagnostics: Diagnostic[] = [];\n\n  constructor(\n      private rootNames: string[], private options: CompilerOptions, private host: CompilerHost,\n      oldProgram?: Program) {\n    if (options.flatModuleOutFile && !options.skipMetadataEmit) {\n      const {host: bundleHost, indexName, errors} = createBundleIndexHost(options, rootNames, host);\n      if (errors) {\n        // TODO(tbosch): once we move MetadataBundler from tsc_wrapped into compiler_cli,\n        // directly create ng.Diagnostic instead of using ts.Diagnostic here.\n        this._optionsDiagnostics.push(...errors.map(e => ({\n                                                      category: e.category,\n                                                      messageText: e.messageText as string,\n                                                      source: SOURCE,\n                                                      code: DEFAULT_ERROR_CODE\n                                                    })));\n      } else {\n        rootNames.push(indexName !);\n        this.host = host = bundleHost;\n      }\n    }\n\n    const oldTsProgram = oldProgram ? oldProgram.getTsProgram() : undefined;\n    this.tsProgram = ts.createProgram(rootNames, options, host, oldTsProgram);\n    this.srcNames =\n        this.tsProgram.getSourceFiles()\n            .map(sf => sf.fileName)\n            .filter(f => !f.match(/\\.ngfactory\\.[\\w.]+$|\\.ngstyle\\.[\\w.]+$|\\.ngsummary\\.[\\w.]+$/));\n    this.metadataCache = new LowerMetadataCache({quotedNames: true}, !!options.strictMetadataEmit);\n    this.aotCompilerHost =\n        new AotCompilerHostImpl(this.tsProgram, options, host, this.metadataCache);\n\n    const aotOptions = getAotCompilerOptions(options);\n    this.compiler = createAotCompiler(this.aotCompilerHost, aotOptions).compiler;\n  }\n\n  // Program implementation\n  getTsProgram(): ts.Program { return this.programWithStubs; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken) {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken): Diagnostic[] {\n    return [...this._optionsDiagnostics, ...getNgOptionDiagnostics(this.options)];\n  }\n\n  getTsSyntacticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ts.Diagnostic[] {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken): Diagnostic[] {\n    return this.structuralDiagnostics;\n  }\n\n  getTsSemanticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ts.Diagnostic[] {\n    return this.programWithStubs.getSemanticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgSemanticDiagnostics(fileName?: string, cancellationToken?: ts.CancellationToken):\n      Diagnostic[] {\n    const compilerDiagnostics = this.generatedFileDiagnostics;\n\n    // If we have diagnostics during the parser phase the type check phase is not meaningful so skip\n    // it.\n    if (compilerDiagnostics && compilerDiagnostics.length) return compilerDiagnostics;\n\n    return this.typeChecker.getDiagnostics(fileName, cancellationToken);\n  }\n\n  loadNgStructureAsync(): Promise<void> {\n    return this.compiler.analyzeModulesAsync(this.rootNames)\n        .catch(this.catchAnalysisError.bind(this))\n        .then(analyzedModules => {\n          if (this._analyzedModules) {\n            throw new Error('Angular structure loaded both synchronously and asynchronsly');\n          }\n          this._analyzedModules = analyzedModules;\n        });\n  }\n\n  emit({emitFlags = EmitFlags.Default, cancellationToken, customTransformers,\n        emitCallback = defaultEmitCallback}: {\n    emitFlags?: EmitFlags,\n    cancellationToken?: ts.CancellationToken,\n    customTransformers?: CustomTransformers,\n    emitCallback?: TsEmitCallback\n  }): ts.EmitResult {\n    return emitCallback({\n      program: this.programWithStubs,\n      host: this.host,\n      options: this.options,\n      targetSourceFile: undefined,\n      writeFile:\n          createWriteFileCallback(emitFlags, this.host, this.metadataCache, this.generatedFiles),\n      cancellationToken,\n      emitOnlyDtsFiles: (emitFlags & (EmitFlags.DTS | EmitFlags.JS)) == EmitFlags.DTS,\n      customTransformers: this.calculateTransforms(customTransformers)\n    });\n  }\n\n  // Private members\n  private get analyzedModules(): NgAnalyzedModules {\n    return this._analyzedModules || (this._analyzedModules = this.analyzeModules());\n  }\n\n  private get structuralDiagnostics(): Diagnostic[] {\n    return this.analyzedModules && this._structuralDiagnostics;\n  }\n\n  private get stubs(): GeneratedFile[] {\n    return this._stubs || (this._stubs = this.generateStubs());\n  }\n\n  private get stubFiles(): string[] {\n    return this._stubFiles ||\n        (this._stubFiles = this.stubs.reduce((files: string[], generatedFile) => {\n             if (generatedFile.source || (generatedFile.stmts && generatedFile.stmts.length)) {\n               return [...files, generatedFile.genFileUrl];\n             }\n             return files;\n           }, []));\n  }\n\n  private get programWithStubsHost(): ts.CompilerHost {\n    return this._programWithStubsHost || (this._programWithStubsHost = createProgramWithStubsHost(\n                                              this.stubs, this.tsProgram, this.host));\n  }\n\n  private get programWithStubs(): ts.Program {\n    return this._programWithStubs || (this._programWithStubs = this.createProgramWithStubs());\n  }\n\n  private get generatedFiles(): GeneratedFile[] {\n    return this._generatedFiles || (this._generatedFiles = this.generateFiles());\n  }\n\n  private get typeChecker(): TypeChecker {\n    return (this._typeChecker && !this._typeChecker.partialResults) ?\n        this._typeChecker :\n        (this._typeChecker = this.createTypeChecker());\n  }\n\n  private get generatedFileDiagnostics(): Diagnostic[]|undefined {\n    return this.generatedFiles && this._generatedFileDiagnostics !;\n  }\n\n  private calculateTransforms(customTransformers?: CustomTransformers): ts.CustomTransformers {\n    const beforeTs: ts.TransformerFactory<ts.SourceFile>[] = [];\n    if (!this.options.disableExpressionLowering) {\n      beforeTs.push(getExpressionLoweringTransformFactory(this.metadataCache));\n    }\n    if (!this.options.skipTemplateCodegen) {\n      beforeTs.push(getAngularEmitterTransformFactory(this.generatedFiles));\n    }\n    if (customTransformers && customTransformers.beforeTs) {\n      beforeTs.push(...customTransformers.beforeTs);\n    }\n    const afterTs = customTransformers ? customTransformers.afterTs : undefined;\n    return {before: beforeTs, after: afterTs};\n  }\n\n  private catchAnalysisError(e: any): NgAnalyzedModules {\n    if (isSyntaxError(e)) {\n      const parserErrors = getParseErrors(e);\n      if (parserErrors && parserErrors.length) {\n        this._structuralDiagnostics =\n            parserErrors.map<Diagnostic>(e => ({\n                                           messageText: e.contextualMessage(),\n                                           category: ts.DiagnosticCategory.Error,\n                                           span: e.span,\n                                           source: SOURCE,\n                                           code: DEFAULT_ERROR_CODE\n                                         }));\n      } else {\n        this._structuralDiagnostics = [{\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n      }\n      this._analyzedModules = emptyModules;\n      return emptyModules;\n    }\n    throw e;\n  }\n\n  private analyzeModules() {\n    try {\n      return this.compiler.analyzeModulesSync(this.srcNames);\n    } catch (e) {\n      return this.catchAnalysisError(e);\n    }\n  }\n\n  private generateStubs() {\n    return this.options.skipTemplateCodegen ? [] : this.compiler.emitAllStubs(this.analyzedModules);\n  }\n\n  private generateFiles() {\n    try {\n      // Always generate the files if requested to ensure we capture any diagnostic errors but only\n      // keep the results if we are not skipping template code generation.\n      const result = this.compiler.emitAllImpls(this.analyzedModules);\n      return this.options.skipTemplateCodegen ? [] : result;\n    } catch (e) {\n      if (isSyntaxError(e)) {\n        this._generatedFileDiagnostics = [{\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n        return [];\n      }\n      throw e;\n    }\n  }\n\n  private createTypeChecker(): TypeChecker {\n    return new TypeChecker(\n        this.tsProgram, this.options, this.host, this.aotCompilerHost, this.options,\n        this.analyzedModules, this.generatedFiles);\n  }\n\n  private createProgramWithStubs(): ts.Program {\n    // If we are skipping code generation just use the original program.\n    // Otherwise, create a new program that includes the stub files.\n    return this.options.skipTemplateCodegen ?\n        this.tsProgram :\n        ts.createProgram(\n            [...this.rootNames, ...this.stubFiles], this.options, this.programWithStubsHost);\n  }\n}\n\nclass AotCompilerHostImpl extends BaseAotCompilerHost<CompilerHost> {\n  moduleNameToFileName(m: string, containingFile: string): string|null {\n    return this.context.moduleNameToFileName(m, containingFile);\n  }\n\n  fileNameToModuleName(importedFile: string, containingFile: string): string|null {\n    return this.context.fileNameToModuleName(importedFile, containingFile);\n  }\n\n  resourceNameToFileName(resourceName: string, containingFile: string): string|null {\n    return this.context.resourceNameToFileName(resourceName, containingFile);\n  }\n\n  toSummaryFileName(fileName: string, referringSrcFileName: string): string {\n    return this.context.toSummaryFileName(fileName, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName: string, referringLibFileName: string): string {\n    return this.context.fromSummaryFileName(fileName, referringLibFileName);\n  }\n}\n\nexport function createProgram(\n    {rootNames, options, host, oldProgram}:\n        {rootNames: string[], options: CompilerOptions, host: CompilerHost, oldProgram?: Program}):\n    Program {\n  return new AngularCompilerProgram(rootNames, options, host, oldProgram);\n}\n\n// Compute the AotCompiler options\nfunction getAotCompilerOptions(options: CompilerOptions): AotCompilerOptions {\n  let missingTranslation = core.MissingTranslationStrategy.Warning;\n\n  switch (options.i18nInMissingTranslations) {\n    case 'ignore':\n      missingTranslation = core.MissingTranslationStrategy.Ignore;\n      break;\n    case 'error':\n      missingTranslation = core.MissingTranslationStrategy.Error;\n      break;\n  }\n\n  let translations: string = '';\n\n  if (options.i18nInFile) {\n    if (!options.i18nInLocale) {\n      throw new Error(`The translation file (${options.i18nInFile}) locale must be provided.`);\n    }\n    translations = fs.readFileSync(options.i18nInFile, 'utf8');\n  } else {\n    // No translations are provided, ignore any errors\n    // We still go through i18n to remove i18n attributes\n    missingTranslation = core.MissingTranslationStrategy.Ignore;\n  }\n\n  return {\n    locale: options.i18nInLocale,\n    i18nFormat: options.i18nInFormat || options.i18nOutFormat, translations, missingTranslation,\n    enableLegacyTemplate: options.enableLegacyTemplate,\n    enableSummariesForJit: true,\n    preserveWhitespaces: options.preserveWhitespaces,\n  };\n}\n\nfunction writeMetadata(\n    host: ts.CompilerHost, emitFilePath: string, sourceFile: ts.SourceFile,\n    metadataCache: LowerMetadataCache, onError?: (message: string) => void) {\n  if (/\\.js$/.test(emitFilePath)) {\n    const path = emitFilePath.replace(/\\.js$/, '.metadata.json');\n\n    // Beginning with 2.1, TypeScript transforms the source tree before emitting it.\n    // We need the original, unmodified, tree which might be several levels back\n    // depending on the number of transforms performed. All SourceFile's prior to 2.1\n    // will appear to be the original source since they didn't include an original field.\n    let collectableFile = sourceFile;\n    while ((collectableFile as any).original) {\n      collectableFile = (collectableFile as any).original;\n    }\n\n    const metadata = metadataCache.getMetadata(collectableFile);\n    if (metadata) {\n      const metadataText = JSON.stringify([metadata]);\n      host.writeFile(path, metadataText, false, onError, [sourceFile]);\n    }\n  }\n}\n\nfunction writeNgSummaryJson(\n    host: ts.CompilerHost, emitFilePath: string, sourceFile: ts.SourceFile,\n    generatedFilesByName: Map<string, GeneratedFile>, onError?: (message: string) => void) {\n  // Note: some files have an empty .ngfactory.js/.d.ts file but still need\n  // .ngsummary.json files (e.g. directives / pipes).\n  // We write the ngSummary when we try to emit the .ngfactory.js files\n  // and not the regular .js files as the latter are not emitted when\n  // we generate code for a npm library which ships .js / .d.ts / .metadata.json files.\n  if (/\\.ngfactory.js$/.test(emitFilePath)) {\n    const emitPath = emitFilePath.replace(/\\.ngfactory\\.js$/, '.ngsummary.json');\n    const genFilePath = sourceFile.fileName.replace(/\\.ngfactory\\.ts$/, '.ngsummary.json');\n    const genFile = generatedFilesByName.get(genFilePath);\n    if (genFile) {\n      host.writeFile(emitPath, genFile.source !, false, onError, [sourceFile]);\n    }\n  }\n}\n\nfunction createWriteFileCallback(\n    emitFlags: EmitFlags, host: ts.CompilerHost, metadataCache: LowerMetadataCache,\n    generatedFiles: GeneratedFile[]) {\n  const generatedFilesByName = new Map<string, GeneratedFile>();\n  generatedFiles.forEach(f => generatedFilesByName.set(f.genFileUrl, f));\n  return (fileName: string, data: string, writeByteOrderMark: boolean,\n          onError?: (message: string) => void, sourceFiles?: ts.SourceFile[]) => {\n    const sourceFile = sourceFiles && sourceFiles.length == 1 ? sourceFiles[0] : null;\n    if (sourceFile) {\n      const isGenerated = GENERATED_FILES.test(fileName);\n      if (isGenerated) {\n        writeNgSummaryJson(host, fileName, sourceFile, generatedFilesByName, onError);\n      }\n      if (!isGenerated && (emitFlags & EmitFlags.Metadata)) {\n        writeMetadata(host, fileName, sourceFile, metadataCache, onError);\n      }\n      if (isGenerated) {\n        const genFile = generatedFilesByName.get(sourceFile.fileName);\n        if (!genFile || !genFile.stmts || !genFile.stmts.length) {\n          // Don't emit empty generated files\n          return;\n        }\n      }\n    }\n    host.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n  };\n}\n\nfunction getNgOptionDiagnostics(options: CompilerOptions): Diagnostic[] {\n  if (options.annotationsAs) {\n    switch (options.annotationsAs) {\n      case 'decorators':\n      case 'static fields':\n        break;\n      default:\n        return [{\n          messageText:\n              'Angular compiler options \"annotationsAs\" only supports \"static fields\" and \"decorators\"',\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n    }\n  }\n  return [];\n}\n\nfunction createProgramWithStubsHost(\n    generatedFiles: GeneratedFile[], originalProgram: ts.Program,\n    originalHost: ts.CompilerHost): ts.CompilerHost {\n  interface FileData {\n    g: GeneratedFile;\n    s?: ts.SourceFile;\n  }\n  return new class implements ts.CompilerHost {\n    private generatedFiles: Map<string, FileData>;\n    writeFile: ts.WriteFileCallback;\n    getCancellationToken: () => ts.CancellationToken;\n    getDefaultLibLocation: () => string;\n    trace: (s: string) => void;\n    getDirectories: (path: string) => string[];\n    directoryExists: (directoryName: string) => boolean;\n    constructor() {\n      this.generatedFiles =\n          new Map(generatedFiles.filter(g => g.source || (g.stmts && g.stmts.length))\n                      .map<[string, FileData]>(g => [g.genFileUrl, {g}]));\n      this.writeFile = originalHost.writeFile;\n      if (originalHost.getDirectories) {\n        this.getDirectories = path => originalHost.getDirectories !(path);\n      }\n      if (originalHost.directoryExists) {\n        this.directoryExists = directoryName => originalHost.directoryExists !(directoryName);\n      }\n      if (originalHost.getCancellationToken) {\n        this.getCancellationToken = () => originalHost.getCancellationToken !();\n      }\n      if (originalHost.getDefaultLibLocation) {\n        this.getDefaultLibLocation = () => originalHost.getDefaultLibLocation !();\n      }\n      if (originalHost.trace) {\n        this.trace = s => originalHost.trace !(s);\n      }\n    }\n    getSourceFile(\n        fileName: string, languageVersion: ts.ScriptTarget,\n        onError?: ((message: string) => void)|undefined): ts.SourceFile {\n      const data = this.generatedFiles.get(fileName);\n      if (data) {\n        return data.s || (data.s = ts.createSourceFile(\n                              fileName, data.g.source || toTypeScript(data.g), languageVersion));\n      }\n      return originalProgram.getSourceFile(fileName) ||\n          originalHost.getSourceFile(fileName, languageVersion, onError);\n    }\n    readFile(fileName: string): string {\n      const data = this.generatedFiles.get(fileName);\n      if (data) {\n        return data.g.source || toTypeScript(data.g);\n      }\n      return originalHost.readFile(fileName);\n    }\n    getDefaultLibFileName = (options: ts.CompilerOptions) =>\n        originalHost.getDefaultLibFileName(options);\n    getCurrentDirectory = () => originalHost.getCurrentDirectory();\n    getCanonicalFileName = (fileName: string) => originalHost.getCanonicalFileName(fileName);\n    useCaseSensitiveFileNames = () => originalHost.useCaseSensitiveFileNames();\n    getNewLine = () => originalHost.getNewLine();\n    realPath = (p: string) => p;\n    fileExists = (fileName: string) =>\n        this.generatedFiles.has(fileName) || originalHost.fileExists(fileName);\n  };\n}\n"]}