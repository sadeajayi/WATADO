{"version":3,"file":"compiler_host.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/compiler_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {syntaxError} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerHost, CompilerOptions} from './api';\n\nconst NODE_MODULES_PACKAGE_NAME = /node_modules\\/((\\w|-)+|(@(\\w|-)+\\/(\\w|-)+))/;\nconst DTS = /\\.d\\.ts$/;\nconst EXT = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n\nexport function createCompilerHost(\n    {options, tsHost = ts.createCompilerHost(options, true)}:\n        {options: CompilerOptions, tsHost?: ts.CompilerHost}): CompilerHost {\n  const mixin = new CompilerHostMixin(tsHost, options);\n  const host = Object.create(tsHost);\n\n  host.moduleNameToFileName = mixin.moduleNameToFileName.bind(mixin);\n  host.fileNameToModuleName = mixin.fileNameToModuleName.bind(mixin);\n  host.toSummaryFileName = mixin.toSummaryFileName.bind(mixin);\n  host.fromSummaryFileName = mixin.fromSummaryFileName.bind(mixin);\n  host.resourceNameToFileName = mixin.resourceNameToFileName.bind(mixin);\n\n  // Make sure we do not `host.realpath()` from TS as we do not want to resolve symlinks.\n  // https://github.com/Microsoft/TypeScript/issues/9552\n  host.realpath = (fileName: string) => fileName;\n\n  return host;\n}\n\nclass CompilerHostMixin {\n  private rootDirs: string[];\n  private basePath: string;\n  private moduleResolutionHost: ModuleFilenameResolutionHost;\n  private moduleResolutionCache: ts.ModuleResolutionCache;\n\n  constructor(private context: ts.CompilerHost, private options: CompilerOptions) {\n    // normalize the path so that it never ends with '/'.\n    this.basePath = normalizePath(this.options.basePath !);\n    this.rootDirs = (this.options.rootDirs || [\n                      this.options.basePath !\n                    ]).map(p => path.resolve(this.basePath, normalizePath(p)));\n    this.moduleResolutionHost = createModuleFilenameResolverHost(context);\n    this.moduleResolutionCache = ts.createModuleResolutionCache(\n        this.context.getCurrentDirectory !(), this.context.getCanonicalFileName.bind(this.context));\n  }\n\n  moduleNameToFileName(m: string, containingFile: string): string|null {\n    if (!containingFile) {\n      if (m.indexOf('.') === 0) {\n        throw new Error('Resolution of relative paths requires a containing file.');\n      }\n      // Any containing file gives the same result for absolute imports\n      containingFile = path.join(this.basePath, 'index.ts');\n    }\n    const resolved = ts.resolveModuleName(\n                           m, containingFile.replace(/\\\\/g, '/'), this.options,\n                           this.moduleResolutionHost, this.moduleResolutionCache)\n                         .resolvedModule;\n    if (resolved) {\n      if (this.options.traceResolution) {\n        console.error('resolve', m, containingFile, '=>', resolved.resolvedFileName);\n      }\n      return resolved.resolvedFileName;\n    }\n    return null;\n  }\n\n  /**\n   * We want a moduleId that will appear in import statements in the generated code\n   * which will be written to `containingFile`.\n   *\n   * Note that we also generate files for files in node_modules, as libraries\n   * only ship .metadata.json files but not the generated code.\n   *\n   * Logic:\n   * 1. if the importedFile and the containingFile are from the project sources\n   *    or from the same node_modules package, use a relative path\n   * 2. if the importedFile is in a node_modules package,\n   *    use a path that starts with the package name.\n   * 3. Error if the containingFile is in the node_modules package\n   *    and the importedFile is in the project soures,\n   *    as that is a violation of the principle that node_modules packages cannot\n   *    import project sources.\n   */\n  fileNameToModuleName(importedFile: string, containingFile: string): string {\n    const originalImportedFile = importedFile;\n    if (this.options.traceResolution) {\n      console.error(\n          'fileNameToModuleName from containingFile', containingFile, 'to importedFile',\n          importedFile);\n    }\n    // If a file does not yet exist (because we compile it later), we still need to\n    // assume it exists it so that the `resolve` method works!\n    if (!this.moduleResolutionHost.fileExists(importedFile)) {\n      this.moduleResolutionHost.assumeFileExists(importedFile);\n    }\n    // drop extension\n    importedFile = importedFile.replace(EXT, '');\n    const importedFilePackagName = getPackageName(importedFile);\n    const containingFilePackageName = getPackageName(containingFile);\n\n    let moduleName: string;\n    if (importedFilePackagName === containingFilePackageName) {\n      const rootedContainingFile = stripRootDir(this.rootDirs, containingFile);\n      const rootedImportedFile = stripRootDir(this.rootDirs, importedFile);\n\n      if (rootedContainingFile !== containingFile && rootedImportedFile !== importedFile) {\n        // if both files are contained in the `rootDirs`, then strip the rootDirs\n        containingFile = rootedContainingFile;\n        importedFile = rootedImportedFile;\n      }\n      moduleName = dotRelative(path.dirname(containingFile), importedFile);\n    } else if (importedFilePackagName) {\n      moduleName = stripNodeModulesPrefix(importedFile);\n    } else {\n      throw new Error(\n          `Trying to import a source file from a node_modules package: import ${originalImportedFile} from ${containingFile}`);\n    }\n    return moduleName;\n  }\n\n  toSummaryFileName(fileName: string, referringSrcFileName: string): string {\n    return this.fileNameToModuleName(fileName, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName: string, referringLibFileName: string): string {\n    const resolved = this.moduleNameToFileName(fileName, referringLibFileName);\n    if (!resolved) {\n      throw new Error(`Could not resolve ${fileName} from ${referringLibFileName}`);\n    }\n    return resolved;\n  }\n\n  resourceNameToFileName(resourceName: string, containingFile: string): string|null {\n    // Note: we convert package paths into relative paths to be compatible with the the\n    // previous implementation of UrlResolver.\n    const firstChar = resourceName[0];\n    if (firstChar === '/') {\n      resourceName = resourceName.slice(1);\n    } else if (firstChar !== '.') {\n      resourceName = `./${resourceName}`;\n    }\n    const filePathWithNgResource =\n        this.moduleNameToFileName(addNgResourceSuffix(resourceName), containingFile);\n    return filePathWithNgResource ? stripNgResourceSuffix(filePathWithNgResource) : null;\n  }\n}\n\ninterface ModuleFilenameResolutionHost extends ts.ModuleResolutionHost {\n  assumeFileExists(fileName: string): void;\n}\n\nfunction createModuleFilenameResolverHost(host: ts.ModuleResolutionHost):\n    ModuleFilenameResolutionHost {\n  const assumedExists = new Set<string>();\n  const resolveModuleNameHost = Object.create(host);\n  // When calling ts.resolveModuleName, additional allow checks for .d.ts files to be done based on\n  // checks for .ngsummary.json files, so that our codegen depends on fewer inputs and requires\n  // to be called less often.\n  // This is needed as we use ts.resolveModuleName in DefaultModuleFilenameResolver\n  // and it should be able to resolve summary file names.\n  resolveModuleNameHost.fileExists = (fileName: string): boolean => {\n    fileName = stripNgResourceSuffix(fileName);\n    if (assumedExists.has(fileName)) {\n      return true;\n    }\n\n    if (host.fileExists(fileName)) {\n      return true;\n    }\n\n    if (DTS.test(fileName)) {\n      const base = fileName.substring(0, fileName.length - 5);\n      return host.fileExists(base + '.ngsummary.json');\n    }\n\n    return false;\n  };\n\n  resolveModuleNameHost.assumeFileExists = (fileName: string) => assumedExists.add(fileName);\n  // Make sure we do not `host.realpath()` from TS as we do not want to resolve symlinks.\n  // https://github.com/Microsoft/TypeScript/issues/9552\n  resolveModuleNameHost.realpath = (fileName: string) => fileName;\n\n  return resolveModuleNameHost;\n}\n\nfunction dotRelative(from: string, to: string): string {\n  const rPath: string = path.relative(from, to).replace(/\\\\/g, '/');\n  return rPath.startsWith('.') ? rPath : './' + rPath;\n}\n\n/**\n * Moves the path into `genDir` folder while preserving the `node_modules` directory.\n */\nfunction getPackageName(filePath: string): string|null {\n  const match = NODE_MODULES_PACKAGE_NAME.exec(filePath);\n  return match ? match[1] : null;\n}\n\nfunction stripRootDir(rootDirs: string[], fileName: string): string {\n  if (!fileName) return fileName;\n  // NB: the rootDirs should have been sorted longest-first\n  for (const dir of rootDirs) {\n    if (fileName.indexOf(dir) === 0) {\n      fileName = fileName.substring(dir.length);\n      break;\n    }\n  }\n  return fileName;\n}\n\nfunction stripNodeModulesPrefix(filePath: string): string {\n  return filePath.replace(/.*node_modules\\//, '');\n}\n\nfunction getNodeModulesPrefix(filePath: string): string|null {\n  const match = /.*node_modules\\//.exec(filePath);\n  return match ? match[1] : null;\n}\n\nfunction normalizePath(p: string): string {\n  return path.normalize(path.join(p, '.')).replace(/\\\\/g, '/');\n}\n\nfunction stripNgResourceSuffix(fileName: string): string {\n  return fileName.replace(/\\.\\$ngresource\\$.*/, '');\n}\n\nfunction addNgResourceSuffix(fileName: string): string {\n  return `${fileName}.$ngresource$`;\n}\n"]}