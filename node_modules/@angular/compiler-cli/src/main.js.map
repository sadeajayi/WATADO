{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Must be imported first, because Angular decorators throw on load.\nimport 'reflect-metadata';\n\nimport * as ts from 'typescript';\nimport * as tsc from '@angular/tsc-wrapped';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as tsickle from 'tsickle';\nimport * as api from './transformers/api';\nimport * as ngc from './transformers/entry_points';\n\nimport {calcProjectFileAndBasePath, exitCodeFromResult, performCompilation, readConfiguration, formatDiagnostics, Diagnostics, ParsedConfiguration, PerformCompilationResult} from './perform_compile';\nimport {performWatchCompilation,Â createPerformWatchHost} from './perform_watch';\nimport {isSyntaxError} from '@angular/compiler';\nimport {CodeGenerator} from './codegen';\n\nexport function main(\n    args: string[], consoleError: (s: string) => void = console.error): Promise<number> {\n  const parsedArgs = require('minimist')(args);\n  if (parsedArgs.w || parsedArgs.watch) {\n    const result = watchMode(parsedArgs, consoleError);\n    return Promise.resolve(exitCodeFromResult(result.firstCompileResult));\n  }\n  const {rootNames, options, errors: configErrors} = readCommandLineAndConfiguration(parsedArgs);\n  if (configErrors.length) {\n    return Promise.resolve(reportErrorsAndExit(options, configErrors, consoleError));\n  }\n  if (options.disableTransformerPipeline) {\n    return disabledTransformerPipelineNgcMain(parsedArgs, consoleError);\n  }\n  const {diagnostics: compileDiags} =\n      performCompilation({rootNames, options, emitCallback: createEmitCallback(options)});\n  return Promise.resolve(reportErrorsAndExit(options, compileDiags, consoleError));\n}\n\nexport function mainSync(\n    args: string[], consoleError: (s: string) => void = console.error): number {\n  const parsedArgs = require('minimist')(args);\n  const {rootNames, options, errors: configErrors} = readCommandLineAndConfiguration(parsedArgs);\n  if (configErrors.length) {\n    return reportErrorsAndExit(options, configErrors, consoleError);\n  }\n  const {diagnostics: compileDiags} =\n      performCompilation({rootNames, options, emitCallback: createEmitCallback(options)});\n  return reportErrorsAndExit(options, compileDiags, consoleError);\n}\n\nfunction createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback {\n  const tsickleOptions: tsickle.TransformerOptions = {\n    googmodule: false,\n    untyped: true,\n    convertIndexImportShorthand: true,\n    transformDecorators: options.annotationsAs !== 'decorators',\n    transformTypesToClosure: options.annotateForClosureCompiler,\n  };\n\n  const tsickleHost: tsickle.TransformerHost = {\n    shouldSkipTsickleProcessing: (fileName) => /\\.d\\.ts$/.test(fileName),\n    pathToModuleName: (context, importPath) => '',\n    shouldIgnoreWarningsForPath: (filePath) => false,\n    fileNameToModuleId: (fileName) => fileName,\n  };\n\n  return ({\n           program,\n           targetSourceFile,\n           writeFile,\n           cancellationToken,\n           emitOnlyDtsFiles,\n           customTransformers = {},\n           host,\n           options\n         }) =>\n             tsickle.emitWithTsickle(\n                 program, tsickleHost, tsickleOptions, host, options, targetSourceFile, writeFile,\n                 cancellationToken, emitOnlyDtsFiles, {\n                   beforeTs: customTransformers.before,\n                   afterTs: customTransformers.after,\n                 });\n}\n\nfunction projectOf(args: any): string {\n  return (args && (args.p || args.project)) || '.';\n}\n\nfunction readCommandLineAndConfiguration(args: any): ParsedConfiguration {\n  const project = projectOf(args);\n  const allDiagnostics: Diagnostics = [];\n  const config = readConfiguration(project);\n  const options = mergeCommandLineParams(args, config.options);\n  if (options.locale) {\n    options.i18nInLocale = options.locale;\n  }\n  return {project, rootNames: config.rootNames, options, errors: config.errors};\n}\n\nfunction reportErrorsAndExit(\n    options: api.CompilerOptions, allDiagnostics: Diagnostics,\n    consoleError: (s: string) => void = console.error): number {\n  const exitCode = allDiagnostics.some(d => d.category === ts.DiagnosticCategory.Error) ? 1 : 0;\n  if (allDiagnostics.length) {\n    consoleError(formatDiagnostics(options, allDiagnostics));\n  }\n  return exitCode;\n}\n\nexport function watchMode(args: any, consoleError: (s: string) => void) {\n  const project = projectOf(args);\n  const {projectFile, basePath} = calcProjectFileAndBasePath(project);\n  const config = readConfiguration(project);\n  return performWatchCompilation(createPerformWatchHost(projectFile, diagnostics => {\n    consoleError(formatDiagnostics(config.options, diagnostics));\n  }, options => createEmitCallback(options)));\n}\n\nfunction mergeCommandLineParams(\n    cliArgs: {[k: string]: string}, options: api.CompilerOptions): api.CompilerOptions {\n  // TODO: also merge in tsc command line parameters by calling\n  // ts.readCommandLine.\n  if (cliArgs.i18nFile) options.i18nInFile = cliArgs.i18nFile;\n  if (cliArgs.i18nFormat) options.i18nInFormat = cliArgs.i18nFormat;\n  if (cliArgs.locale) options.i18nInLocale = cliArgs.locale;\n  const mt = cliArgs.missingTranslation;\n  if (mt === 'error' || mt === 'warning' || mt === 'ignore') {\n    options.i18nInMissingTranslations = mt;\n  }\n  return options;\n}\n\nfunction disabledTransformerPipelineNgcMain(\n    args: any, consoleError: (s: string) => void = console.error): Promise<number> {\n  const cliOptions = new tsc.NgcCliOptions(args);\n  const project = args.p || args.project || '.';\n  return tsc.main(project, cliOptions, disabledTransformerPipelineCodegen)\n      .then(() => 0)\n      .catch(e => {\n        if (e instanceof tsc.UserError || isSyntaxError(e)) {\n          consoleError(e.message);\n        } else {\n          consoleError(e.stack);\n        }\n        return Promise.resolve(1);\n      });\n}\n\nfunction disabledTransformerPipelineCodegen(\n    ngOptions: tsc.AngularCompilerOptions, cliOptions: tsc.NgcCliOptions, program: ts.Program,\n    host: ts.CompilerHost) {\n  if (ngOptions.enableSummariesForJit === undefined) {\n    // default to false\n    ngOptions.enableSummariesForJit = false;\n  }\n  return CodeGenerator.create(ngOptions, cliOptions, program, host).codegen();\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  main(args).then((exitCode: number) => process.exitCode = exitCode);\n}\n"]}