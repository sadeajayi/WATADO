{"version":3,"file":"perform_watch.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform_watch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as chokidar from 'chokidar';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {Diagnostics, ParsedConfiguration, PerformCompilationResult, exitCodeFromResult, performCompilation, readConfiguration} from './perform_compile';\nimport * as api from './transformers/api';\nimport {createCompilerHost} from './transformers/entry_points';\n\nconst ChangeDiagnostics = {\n  Compilation_complete_Watching_for_file_changes: {\n    category: ts.DiagnosticCategory.Message,\n    messageText: 'Compilation complete. Watching for file changes.',\n    code: api.DEFAULT_ERROR_CODE,\n    source: api.SOURCE\n  },\n  Compilation_failed_Watching_for_file_changes: {\n    category: ts.DiagnosticCategory.Message,\n    messageText: 'Compilation failed. Watching for file changes.',\n    code: api.DEFAULT_ERROR_CODE,\n    source: api.SOURCE\n  },\n  File_change_detected_Starting_incremental_compilation: {\n    category: ts.DiagnosticCategory.Message,\n    messageText: 'File change detected. Starting incremental compilation.',\n    code: api.DEFAULT_ERROR_CODE,\n    source: api.SOURCE\n  },\n};\n\nexport enum FileChangeEvent {\n  Change,\n  CreateDelete\n}\n\nexport interface PerformWatchHost {\n  reportDiagnostics(diagnostics: Diagnostics): void;\n  readConfiguration(): ParsedConfiguration;\n  createCompilerHost(options: api.CompilerOptions): api.CompilerHost;\n  createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback|undefined;\n  onFileChange(listener: (event: FileChangeEvent, fileName: string) => void):\n      {close: () => void, ready: (cb: () => void) => void};\n  setTimeout(callback: () => void, ms: number): any;\n  clearTimeout(timeoutId: any): void;\n}\n\nexport function createPerformWatchHost(\n    configFileName: string, reportDiagnostics: (diagnostics: Diagnostics) => void,\n    createEmitCallback?: (options: api.CompilerOptions) => api.TsEmitCallback): PerformWatchHost {\n  return {\n    reportDiagnostics: reportDiagnostics,\n    createCompilerHost: options => createCompilerHost({options}),\n    readConfiguration: () => readConfiguration(configFileName),\n    createEmitCallback: options => createEmitCallback ? createEmitCallback(options) : undefined,\n    onFileChange: (listeners) => {\n      const parsed = readConfiguration(configFileName);\n      function stubReady(cb: () => void) { process.nextTick(cb); }\n      if (parsed.errors && parsed.errors.length) {\n        reportDiagnostics(parsed.errors);\n        return {close: () => {}, ready: stubReady};\n      }\n      if (!parsed.options.basePath) {\n        reportDiagnostics([{\n          category: ts.DiagnosticCategory.Error,\n          messageText: 'Invalid configuration option. baseDir not specified',\n          source: api.SOURCE,\n          code: api.DEFAULT_ERROR_CODE\n        }]);\n        return {close: () => {}, ready: stubReady};\n      }\n      const watcher = chokidar.watch(parsed.options.basePath, {\n        // ignore .dotfiles, .js and .map files.\n        // can't ignore other files as we e.g. want to recompile if an `.html` file changes as well.\n        ignored: /((^[\\/\\\\])\\..)|(\\.js$)|(\\.map$)|(\\.metadata\\.json)/,\n        ignoreInitial: true,\n        persistent: true,\n      });\n      watcher.on('all', (event: string, path: string) => {\n        switch (event) {\n          case 'change':\n            listeners(FileChangeEvent.Change, path);\n            break;\n          case 'unlink':\n          case 'add':\n            listeners(FileChangeEvent.CreateDelete, path);\n            break;\n        }\n      });\n      function ready(cb: () => void) { watcher.on('ready', cb); }\n      return {close: () => watcher.close(), ready};\n    },\n    setTimeout: (ts.sys.clearTimeout && ts.sys.setTimeout) || setTimeout,\n    clearTimeout: (ts.sys.setTimeout && ts.sys.clearTimeout) || clearTimeout,\n  };\n}\n\n/**\n * The logic in this function is adapted from `tsc.ts` from TypeScript.\n */\nexport function performWatchCompilation(host: PerformWatchHost): {\n  close: () => void,\n  ready: (cb: () => void) => void,\n  firstCompileResult: PerformCompilationResult | undefined\n} {\n  let cachedProgram: api.Program|undefined;            // Program cached from last compilation\n  let cachedCompilerHost: api.CompilerHost|undefined;  // CompilerHost cached from last compilation\n  let cachedOptions: ParsedConfiguration|undefined;  // CompilerOptions cached from last compilation\n  let timerHandleForRecompilation: any;  // Handle for 0.25s wait timer to trigger recompilation\n\n  // Watch basePath, ignoring .dotfiles\n  const fileWatcher = host.onFileChange(watchedFileChanged);\n  const ingoreFilesForWatch = new Set<string>();\n\n  const firstCompileResult = doCompilation();\n\n  const readyPromise = new Promise(resolve => fileWatcher.ready(resolve));\n\n  return {close, ready: cb => readyPromise.then(cb), firstCompileResult};\n\n  function close() {\n    fileWatcher.close();\n    if (timerHandleForRecompilation) {\n      host.clearTimeout(timerHandleForRecompilation);\n      timerHandleForRecompilation = undefined;\n    }\n  }\n\n  // Invoked to perform initial compilation or re-compilation in watch mode\n  function doCompilation() {\n    if (!cachedOptions) {\n      cachedOptions = host.readConfiguration();\n    }\n    if (cachedOptions.errors && cachedOptions.errors.length) {\n      host.reportDiagnostics(cachedOptions.errors);\n      return;\n    }\n    if (!cachedCompilerHost) {\n      // TODO(chuckj): consider avoiding re-generating factories for libraries.\n      // Consider modifying the AotCompilerHost to be able to remember the summary files\n      // generated from previous compiliations and return false from isSourceFile for\n      // .d.ts files for which a summary file was already generated.å\n      cachedCompilerHost = host.createCompilerHost(cachedOptions.options);\n      const originalWriteFileCallback = cachedCompilerHost.writeFile;\n      cachedCompilerHost.writeFile = function(\n          fileName: string, data: string, writeByteOrderMark: boolean,\n          onError?: (message: string) => void, sourceFiles?: ts.SourceFile[]) {\n        ingoreFilesForWatch.add(path.normalize(fileName));\n        return originalWriteFileCallback(fileName, data, writeByteOrderMark, onError, sourceFiles);\n      };\n    }\n    ingoreFilesForWatch.clear();\n    const compileResult = performCompilation({\n      rootNames: cachedOptions.rootNames,\n      options: cachedOptions.options,\n      host: cachedCompilerHost,\n      oldProgram: cachedProgram,\n      emitCallback: host.createEmitCallback(cachedOptions.options)\n    });\n\n    if (compileResult.diagnostics.length) {\n      host.reportDiagnostics(compileResult.diagnostics);\n    }\n\n    const exitCode = exitCodeFromResult(compileResult);\n    if (exitCode == 0) {\n      cachedProgram = compileResult.program;\n      host.reportDiagnostics([ChangeDiagnostics.Compilation_complete_Watching_for_file_changes]);\n    } else {\n      host.reportDiagnostics([ChangeDiagnostics.Compilation_failed_Watching_for_file_changes]);\n    }\n\n    return compileResult;\n  }\n\n  function resetOptions() {\n    cachedProgram = undefined;\n    cachedCompilerHost = undefined;\n    cachedOptions = undefined;\n  }\n\n  function watchedFileChanged(event: FileChangeEvent, fileName: string) {\n    if (cachedOptions && event === FileChangeEvent.Change &&\n        // TODO(chuckj): validate that this is sufficient to skip files that were written.\n        // This assumes that the file path we write is the same file path we will receive in the\n        // change notification.\n        path.normalize(fileName) === path.normalize(cachedOptions.project)) {\n      // If the configuration file changes, forget everything and start the recompilation timer\n      resetOptions();\n    } else if (event === FileChangeEvent.CreateDelete) {\n      // If a file was added or removed, reread the configuration\n      // to determine the new list of root files.\n      cachedOptions = undefined;\n    }\n    if (!ingoreFilesForWatch.has(path.normalize(fileName))) {\n      // Ignore the file if the file is one that was written by the compiler.\n      startTimerForRecompilation();\n    }\n  }\n\n  // Upon detecting a file change, wait for 250ms and then perform a recompilation. This gives batch\n  // operations (such as saving all modified files in an editor) a chance to complete before we kick\n  // off a new compilation.\n  function startTimerForRecompilation() {\n    if (timerHandleForRecompilation) {\n      host.clearTimeout(timerHandleForRecompilation);\n    }\n    timerHandleForRecompilation = host.setTimeout(recompile, 250);\n  }\n\n  function recompile() {\n    timerHandleForRecompilation = undefined;\n    host.reportDiagnostics(\n        [ChangeDiagnostics.File_change_detected_Starting_incremental_compilation]);\n    doCompilation();\n  }\n}"]}